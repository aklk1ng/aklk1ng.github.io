<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aklk1ng&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-01T07:24:28.817Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>aklk1ng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/07/01/hello-world/"/>
    <id>http://example.com/2023/07/01/hello-world/</id>
    <published>2023-07-01T07:24:28.817Z</published>
    <updated>2023-07-01T07:24:28.817Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Archlinux-KDE-Install</title>
    <link href="http://example.com/2023/07/01/ArchlinuxInstall/"/>
    <id>http://example.com/2023/07/01/ArchlinuxInstall/</id>
    <published>2023-07-01T07:24:28.813Z</published>
    <updated>2023-07-03T06:17:50.710Z</updated>
    
    <content type="html"><![CDATA[<!-- vim-markdown-toc GFM --><ul><li><a href="#1-%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9Cwifi">1. 连接网络(wifi)</a></li><li><a href="#2%E6%9B%B4%E6%96%B0%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F">2.更新系统时钟</a></li><li><a href="#3%E5%88%86%E5%8C%BA">3.分区</a></li><li><a href="#4%E6%A0%BC%E5%BC%8F%E5%8C%96">4.格式化</a></li><li><a href="#5%E6%8C%82%E8%BD%BD">5.挂载</a></li><li><a href="#6%E9%95%9C%E5%83%8F%E6%BA%90%E7%9A%84%E9%80%89%E6%8B%A9">6.镜像源的选择</a></li><li><a href="#7%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F">7.安装系统</a></li><li><a href="#8%E7%94%9F%E6%88%90fstab%E6%96%87%E4%BB%B6">8.生成fstab文件</a></li><li><a href="#9%E5%88%87%E6%8D%A2%E5%88%B0%E5%AE%89%E8%A3%85%E5%A5%BD%E7%9A%84%E7%B3%BB%E7%BB%9F">9.切换到安装好的系统</a></li><li><a href="#10%E6%97%B6%E5%8C%BA%E8%AE%BE%E7%BD%AE">10.时区设置</a></li><li><a href="#11%E8%AE%BE%E7%BD%AElocale%E8%BF%9B%E8%A1%8C%E6%9C%AC%E5%9C%B0%E5%8C%96">11.设置Locale进行本地化</a></li><li><a href="#12%E8%AE%BE%E7%BD%AE%E4%B8%BB%E6%9C%BA%E5%90%8D">12.设置主机名</a></li><li><a href="#13%E8%AE%BE%E7%BD%AEroot%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81">13.设置root用户密码</a></li><li><a href="#14%E5%AE%89%E8%A3%85%E5%BE%AE%E7%A0%81">14.安装微码</a></li><li><a href="#15%E5%AE%89%E8%A3%85%E5%BC%95%E5%AF%BC%E7%A8%8B%E5%BA%8F">15.安装引导程序</a></li><li><a href="#16%E5%AE%8C%E6%88%90%E6%97%A0%E7%95%8C%E9%9D%A2%E5%AE%89%E8%A3%85">16.完成无界面安装</a></li><li><a href="#17%E5%86%8D%E6%AC%A1%E9%85%8D%E7%BD%AE">17.再次配置</a></li><li><a href="#18%E5%BC%80%E5%90%AF32%E4%BD%8D%E6%94%AF%E6%8C%81%E5%BA%93">18.开启32位支持库</a></li><li><a href="#19%E6%B7%BB%E5%8A%A0%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7">19.添加普通用户</a></li><li><a href="#20%E5%AE%89%E8%A3%85%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8">20.安装显卡驱动</a></li><li><a href="#21%E5%AE%89%E8%A3%85%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83">21.安装桌面环境</a></li><li><a href="#22%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%96%87">22.设置系统中文</a></li><li><a href="#23%E5%AE%89%E8%A3%85yay">23.安装yay</a></li><li><a href="#24%E9%87%8D%E5%90%AF%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0archlinux-joy">24.重启（欢迎来到archlinux :joy:）</a></li><li><a href="#25%E5%AE%89%E8%A3%85%E8%BE%93%E5%85%A5%E6%B3%95%E6%9C%89%E4%B8%80%E4%BA%9B%E5%8F%AF%E8%83%BD%E6%98%AF%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84">25.安装输入法(有一些可能是找不到的)</a></li><li><a href="#26%E5%90%AF%E5%8A%A8%E8%93%9D%E7%89%99">26.启动蓝牙</a></li></ul><!-- vim-markdown-toc --><h3 id="1-连接网络-wifi"><a href="#1-连接网络-wifi" class="headerlink" title="1. 连接网络(wifi)"></a>1. 连接网络(wifi)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iwctl <span class="comment">#进入交互命令行</span></span><br><span class="line">device list<span class="comment">#列出设备名，例如网卡wlan0</span></span><br><span class="line">staction <span class="comment">#扫描网络</span></span><br><span class="line">station wlan0 get-networks<span class="comment">#列出可连接的网络</span></span><br><span class="line">station wlan0 connect THE-WIRELESS-NAME<span class="comment">#进行连接，之后输入密码即可</span></span><br><span class="line"><span class="built_in">exit</span><span class="comment">#退出</span></span><br></pre></td></tr></table></figure><p>可以使用<strong>ping</strong>命令检验</p><h3 id="2-更新系统时钟"><a href="#2-更新系统时钟" class="headerlink" title="2.更新系统时钟"></a>2.更新系统时钟</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-ntp 1/true<span class="comment">#将系统时间与网络时间进行同步</span></span><br><span class="line">timedatectl status<span class="comment">#检查服务状态</span></span><br></pre></td></tr></table></figure><h3 id="3-分区"><a href="#3-分区" class="headerlink" title="3.分区"></a>3.分区</h3><p><strong>对于分区而言，有许多中的方案，这里之介绍一种</strong></p><ul><li>EFI分区：几百M即可，可以直接挂载windows的EFI分区，也可以在分一块新的内存</li><li>根目录：直接将剩余的磁盘分给它，在Manjaro的安装中，我试过将它分为&#x2F;，&#x2F;home，&#x2F;opt,但是效果不是很好，有意思的是，采取这种方案无法查看&#x2F;home目录的内存大小（可以都尝试一下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l<span class="comment">#对硬盘进行扫描，注意好需要分的空间</span></span><br><span class="line">cfdisk /device<span class="comment">#这里才用可视化的工具进行分区，也可以用fdisk,但对于较麻烦的可视化跟友好</span></span><br></pre></td></tr></table></figure><h3 id="4-格式化"><a href="#4-格式化" class="headerlink" title="4.格式化"></a>4.格式化</h3><p>与上对应</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfs.vfat<span class="comment">#格式化为引导目录</span></span><br><span class="line">mkfs.ext4<span class="comment">#linux系统普通目录格式</span></span><br></pre></td></tr></table></figure><h3 id="5-挂载"><a href="#5-挂载" class="headerlink" title="5.挂载"></a>5.挂载</h3><p>在挂载时，先挂载根目录，在挂载EFI分区，这里的sdax只是例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sdax /mnt</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/boot<span class="comment">#创建boot目录</span></span><br><span class="line">mount /dev/sdax /mnt/boot</span><br></pre></td></tr></table></figure><h3 id="6-镜像源的选择"><a href="#6-镜像源的选择" class="headerlink" title="6.镜像源的选择"></a>6.镜像源的选择</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>新版的镜像会提供不同国家的镜像源，直接将合适的源粘贴到首行即可，这里提供几个源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Server = https://mirrors.163.com/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span><span class="comment">#163源</span></span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span><span class="comment">#中科大</span></span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span><span class="comment">#清华</span></span><br><span class="line">Server = https://mirror.0xem.ma/arch/<span class="variable">$repo</span>/os/<span class="variable">$arch</span>    <span class="comment">#北美洲地区:加拿大</span></span><br><span class="line">Server = https://mirror.aktkn.sg/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span>    <span class="comment">#东南亚地区:新加坡</span></span><br><span class="line">Server = https://archlinux.uk.mirror.allworldit.com/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span>    <span class="comment">#欧洲地区:英国</span></span><br><span class="line">Server = https://mirrors.cat.net/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span>    <span class="comment">#东亚地区:日本</span></span><br></pre></td></tr></table></figure><h3 id="7-安装系统"><a href="#7-安装系统" class="headerlink" title="7.安装系统"></a>7.安装系统</h3><p><a href="https://github.com/aklk1ng/nvim.git">my neovim config</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base base-devel linux linux-headers linux-firmware dhcpcd vim neovim dialog networkmanager netctl <span class="comment">#base-devel在AUR包的安装是必须的</span></span><br></pre></td></tr></table></figure><h3 id="8-生成fstab文件"><a href="#8-生成fstab文件" class="headerlink" title="8.生成fstab文件"></a>8.生成fstab文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -L /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p><strong>cat &#x2F;mnt&#x2F;etc&#x2F;fstab</strong>检查文件内容</p><h3 id="9-切换到安装好的系统"><a href="#9-切换到安装好的系统" class="headerlink" title="9.切换到安装好的系统"></a>9.切换到安装好的系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure><h3 id="10-时区设置"><a href="#10-时区设置" class="headerlink" title="10.时区设置"></a>10.时区设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">hwclock --systohc<span class="comment">#对硬件进行时间设置，将正确的UTC时间写入硬件时间</span></span><br></pre></td></tr></table></figure><h3 id="11-设置Locale进行本地化"><a href="#11-设置Locale进行本地化" class="headerlink" title="11.设置Locale进行本地化"></a>11.设置Locale进行本地化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--使用vim进行编辑，后续才会进行下载(sudo pacman -S vim)</span><br><span class="line">vim /etc/locale.gen<span class="comment">#去掉 en_US.UTF-8 所在行以及 zh_CN.UTF-8 所在行的注释符号（#）</span></span><br><span class="line">locale-gen<span class="comment">#生成 locale</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;LANG=en_US.UTF-8&#x27;</span>  &gt; /etc/locale.conf<span class="comment">#向 /etc/locale.conf 导入内容</span></span><br></pre></td></tr></table></figure><h3 id="12-设置主机名"><a href="#12-设置主机名" class="headerlink" title="12.设置主机名"></a>12.设置主机名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hostname<span class="comment">#直接写入保存即可</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line"><span class="comment">#加入以下内容：</span></span><br><span class="line">127.0.0.1   localhost</span><br><span class="line">::1         localhost</span><br><span class="line">127.0.1.1   YOUR-HOSTNAME.localdomain YOUR-HOSTNAME</span><br></pre></td></tr></table></figure><h3 id="13-设置root用户密码"><a href="#13-设置root用户密码" class="headerlink" title="13.设置root用户密码"></a>13.设置root用户密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure><h3 id="14-安装微码"><a href="#14-安装微码" class="headerlink" title="14.安装微码"></a>14.安装微码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -S intel-ucode   <span class="comment">#Intel</span></span><br><span class="line">pacman -S amd-ucode     <span class="comment">#AMD</span></span><br></pre></td></tr></table></figure><h3 id="15-安装引导程序"><a href="#15-安装引导程序" class="headerlink" title="15.安装引导程序"></a>15.安装引导程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -S os-prober ntfs-3g grub efibootmgr   <span class="comment">#grub是启动引导器，efibootmgr被 grub 脚本用来将启动项写入 NVRAM。</span></span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg<span class="comment">#生成 GRUB 所需的配置文件</span></span><br></pre></td></tr></table></figure><p><strong>os-prober需要手动安装，在&#x2F;etc&#x2F;dafault&#x2F;grub中，取消GRUB_DISABLE_OS_PROBER&#x3D;false的注释，这样在开机时进入bios中将grub的启动项设置为最高优先级，即可进入grub选择操作系统界面,并可以选择windows系统</strong></p><h3 id="16-完成无界面安装"><a href="#16-完成无界面安装" class="headerlink" title="16.完成无界面安装"></a>16.完成无界面安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span>                <span class="comment"># 退回安装环境#</span></span><br><span class="line">umount -R  /mnt     <span class="comment"># 卸载新分区</span></span><br><span class="line">reboot              <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure><p><strong>注意，重启前要先拔掉优盘，否则你重启后还是进安装程序而不是安装好的系统</strong></p><h3 id="17-再次配置"><a href="#17-再次配置" class="headerlink" title="17.再次配置"></a>17.再次配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> NetworkManager<span class="comment">#允许网络服务</span></span><br><span class="line">systemctl start NetworkManager<span class="comment">#开启</span></span><br><span class="line">nmcli dev wifi list<span class="comment">#进行网络扫描</span></span><br><span class="line">nmcli dev wifi connect <span class="string">&quot;THE-WIRELESS-NAME&quot;</span> password <span class="string">&quot;THE-PASSWORD&quot;</span><span class="comment">#进行连接</span></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/xxx of=/swapfile bs=1M count=512 status=progress<span class="comment">#设置交换分区（非必要）</span></span><br><span class="line"><span class="built_in">chmod</span> 600 /swapfile<span class="comment">#设置权限</span></span><br><span class="line">mkswap /swapfile<span class="comment">#格式化</span></span><br><span class="line">swapon /swapfile<span class="comment">#启用swapfile</span></span><br><span class="line">vim /etc/fstab</span><br><span class="line"><span class="comment">#添加以下内容：/swapfile none swap defaults 0 0</span></span><br></pre></td></tr></table></figure><h3 id="18-开启32位支持库"><a href="#18-开启32位支持库" class="headerlink" title="18.开启32位支持库"></a>18.开启32位支持库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.conf<span class="comment">#去掉[multilib]一节中两行的注释，来开启 32 位库支持</span></span><br><span class="line">pacman -Syyu<span class="comment">#最后:wq 保存退出，刷新 pacman 数据库</span></span><br></pre></td></tr></table></figure><h3 id="19-添加普通用户"><a href="#19-添加普通用户" class="headerlink" title="19.添加普通用户"></a>19.添加普通用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -G wheel YOUR-NAME<span class="comment">#wheel为所属用户组</span></span><br><span class="line">passwd YOUR-NAME</span><br><span class="line">pacman -S sudo</span><br><span class="line">sudo vim /etc/sudoers<span class="comment">#若还是无法修改需更改文件权限</span></span><br><span class="line">取消wheel行的注释</span><br></pre></td></tr></table></figure><h3 id="20-安装显卡驱动"><a href="#20-安装显卡驱动" class="headerlink" title="20.安装显卡驱动"></a>20.安装显卡驱动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xf86-video-intel mesa<span class="comment">#intel用户,其他显卡可以在archlinux官网查询</span></span><br></pre></td></tr></table></figure><h3 id="21-安装桌面环境"><a href="#21-安装桌面环境" class="headerlink" title="21.安装桌面环境"></a>21.安装桌面环境</h3><p><strong>非必要，你可以使用window managers such as i3wm–what i used, dwm–what i use now, bspwm–what i haven’t used and so on</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--- kde</span><br><span class="line">sudo pacman -S xorg plasma kde-applications sddm network-manager-applet<span class="comment">#桌面基础包</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sddm<span class="comment">#允许登陆欢迎服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> NetworkManager<span class="comment">#允许网络服务</span></span><br></pre></td></tr></table></figure><p><strong>基础功能包(可选则性安装)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S sof-firmware alsa-firmware alsa-ucm-conf                     <span class="comment">#一些可能需要的声音固件</span></span><br><span class="line">sudo pacman -S ntfs-3g                                                      <span class="comment">#识别NTFS格式的硬盘</span></span><br><span class="line">sudo pacman -S adobe-source-han-serif-cn-fonts wqy-zenhei                   <span class="comment">#安装几个开源中文字体 一般装上文泉驿就能解决大多wine应用中文方块的问题</span></span><br><span class="line">sudo pacman -S noto-fonts-cjk noto-fonts-emoji noto-fonts-extra             <span class="comment">#安装谷歌开源字体及表情</span></span><br><span class="line">sudo pacman -S firefox chromium                                             <span class="comment">#安装常用的火狐、谷歌浏览器</span></span><br><span class="line">sudo pacman -S ark                                                          <span class="comment">#与dolphin同用右键解压</span></span><br><span class="line">sudo pacman -S p7zip unrar unarchiver lzop lrzip                            <span class="comment">#安装ark可选依赖</span></span><br><span class="line">sudo pacman -S packagekit-qt5 packagekit appstream-qt appstream             <span class="comment">#确保Discover(软件中心）可用 需重启</span></span><br><span class="line">sudo pacman -S gwenview                                                     <span class="comment">#图片查看器</span></span><br><span class="line">sudo pacman -S git wget kate <span class="built_in">bind</span>                                                <span class="comment">#一些工具</span></span><br></pre></td></tr></table></figure><p><strong>如果存在找不到目标包，先舍弃即可，不要安装过多字体：在字体超过 255 种时，某些 QT 程序可能无法正确显示某些表情和符号</strong></p><h3 id="22-设置系统中文"><a href="#22-设置系统中文" class="headerlink" title="22.设置系统中文"></a>22.设置系统中文</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/locale.conf</span><br><span class="line"><span class="comment">#添加如下内容：</span></span><br><span class="line">LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure><h3 id="23-安装yay"><a href="#23-安装yay" class="headerlink" title="23.安装yay"></a>23.安装yay</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对go进行换源,github相对来说好一些，实在不行修改hosts：</span></span><br><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on</span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br><span class="line"><span class="comment">#or(推荐)：</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export GO111MODULE=on&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export GOPROXY=https://goproxy.cn&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line"><span class="built_in">source</span> ~/.profile</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure><h3 id="24-重启（欢迎来到archlinux-joy-）"><a href="#24-重启（欢迎来到archlinux-joy-）" class="headerlink" title="24.重启（欢迎来到archlinux :joy:）"></a>24.重启（欢迎来到archlinux :joy:）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h3 id="25-安装输入法-有一些可能是找不到的"><a href="#25-安装输入法-有一些可能是找不到的" class="headerlink" title="25.安装输入法(有一些可能是找不到的)"></a>25.安装输入法(有一些可能是找不到的)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-im <span class="comment">#基础包组</span></span><br><span class="line">sudo pacman -S fcitx5-chinese-addons <span class="comment">#官方中文输入引擎</span></span><br><span class="line">sudo pacman -S fcitx5-anthy <span class="comment">#日文输入引擎</span></span><br><span class="line">yay -S fcitx5-pinyin-moegirl <span class="comment">#萌娘百科词库</span></span><br><span class="line">sudo pacman -S fcitx5-pinyin-zhwiki <span class="comment">#中文维基百科词库</span></span><br><span class="line">sudo pacman -S fcitx5-material-color <span class="comment">#主题</span></span><br><span class="line"></span><br><span class="line">sudo vim ~/.xinitrc</span><br><span class="line"><span class="comment">#添加如下内容：</span></span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx5</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx5</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=@im=fcitx5</span><br><span class="line"><span class="built_in">export</span> SDL_IM_MODULE=fcitx5</span><br><span class="line"><span class="built_in">export</span> GLFW_IM_MODULE=ibus <span class="comment"># for kitty terminal</span></span><br></pre></td></tr></table></figure><p><strong>可能要重启后才能开始使用fcitx5输入法,如果你没有使用桌面环境，可以使用 fcitx5-configtool 工具来进行配置</strong></p><ul><li>打开 <em>系统设置</em> &gt; <em>区域设置</em> &gt; _输入法_，先点击<code>运行Fcitx</code>即可，拼音为默认添加项</li><li>接下来点击 <em>拼音</em> 右侧的配置按钮，点选<code>云拼音</code>和<code>在程序中显示预编辑文本</code> 最后应用</li><li>回到输入法设置，点击<code>配置附加组件</code>，找到 <em>经典用户界面</em> 在主题里选择一个你喜欢的颜色 最后应用</li><li>注销，重新登陆，就可以发现已经可以在各个软件中输入中文了</li></ul><h3 id="26-启动蓝牙"><a href="#26-启动蓝牙" class="headerlink" title="26.启动蓝牙"></a>26.启动蓝牙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S pulseaudio pulseaudio-alsa bluez bluez-utils</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> --now bluetooth</span><br><span class="line"><span class="comment">#如果要连接蓝牙音频设备，需要安装 pulseaudio-bluetooth 并重启 pulseaudio</span></span><br><span class="line">sudo pacman -S pulseaudio-bluetooth</span><br><span class="line">pulseaudio -k</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- vim-markdown-toc GFM --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9Cwifi&quot;&gt;1. 连接网络(wifi)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2%E6%9B%B</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Manjaro</title>
    <link href="http://example.com/2023/07/01/Manjaro/"/>
    <id>http://example.com/2023/07/01/Manjaro/</id>
    <published>2023-07-01T07:24:28.813Z</published>
    <updated>2023-07-01T07:24:28.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Manjaro双系统的安装与简易配置"><a href="#Manjaro双系统的安装与简易配置" class="headerlink" title="Manjaro双系统的安装与简易配置"></a>Manjaro双系统的安装与简易配置</h1><h3 id="1-首先是iso镜像的下载，可以前往以下地址："><a href="#1-首先是iso镜像的下载，可以前往以下地址：" class="headerlink" title="1.首先是iso镜像的下载，可以前往以下地址："></a>1.首先是iso镜像的下载，可以前往以下地址：</h3><p><a href="https://manjaro.org/download/">https://manjaro.org/download/</a></p><p><strong>对于下载而言，官网提供了三种发行版，可以自行选择，再可以选择Torrent文件再使用相应软件（windows微软商店可以搜索）进行完整的下载，也可以直接下载iso文件</strong></p><h3 id="2-U盘启动盘的制作，在windows中下载Rufus软件，具体的选择可以参考下图："><a href="#2-U盘启动盘的制作，在windows中下载Rufus软件，具体的选择可以参考下图：" class="headerlink" title="2.U盘启动盘的制作，在windows中下载Rufus软件，具体的选择可以参考下图："></a>2.U盘启动盘的制作，在windows中下载Rufus软件，具体的选择可以参考下图：</h3><p><img src="/2023/07/01/Manjaro/v2-47a5018309090d6cdaf35f1b4f3190f4_r.jpg"></p><h3 id="3-安装系统前的准备"><a href="#3-安装系统前的准备" class="headerlink" title="3.安装系统前的准备"></a>3.安装系统前的准备</h3><ul><li>在windows系统中要关闭系统的安全启动模式</li><li>对现有的磁盘进行分区来给Manjaro提供空间，我的空间是100g,如果仍有余地的话可以再加</li><li>对于windows系统可以在系统设置里找到<strong>系统更新</strong>，再找到<strong>恢复</strong>，最后是<strong>高级启动</strong>，这样可以在启动时提供使用U盘进行引导的选择，也可以使用通用方法：进入bios模式（具体笔记本可以自查），将U盘启动项提高至优先级</li></ul><h3 id="4-正式安装"><a href="#4-正式安装" class="headerlink" title="4.正式安装"></a>4.正式安装</h3><p>当你成功选择U盘启动项后，将看到Manjaro的启动安装界面，先选择好语言，对于时钟，之后可以使用命令进行统一，再选择<strong>Boot</strong>选项，之后就会进入桌面，并且进行像Ubuntu那样的安装界面，首先是选择手动分区，具体的分区有**&#x2F;，&#x2F;home，&#x2F;opt,&#x2F;boot&#x2F;efi，&#x2F;linuxswap**，前三个分区最好连在一起，方便如果磁盘没有分配合理时进行修改，对于&#x2F;boot&#x2F;efi,需要几百M的空间即可，但是要将文件类型选择为FAT32,同时标记为Boot,<strong>如果你没有进行这一步，后续会进行警告，留意</strong>，而交换分区8到10g即可，目前我还没有使用过，毕竟系统资源的占用比率没有那么高，后续都是比较相似的安装步骤了。安装结束后，要再次进入Bios界面将Manjaro选项的启动项设为最高优先级，这样每次启动电脑时都可以选择是Manjaro还是windows。</p><h3 id="5-配置"><a href="#5-配置" class="headerlink" title="5.配置"></a>5.配置</h3><ul><li><p>换源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure><p>在筛选出来的选项中选择第一个即可，随后编辑**&#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist**,在China部份添加，刚刚选择的地址（可以在终端复制）</p></li><li><p>更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syyu </span><br></pre></td></tr></table></figure></li><li><p>导入GPG key,使得archlinuxcn软件源可以正常使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure></li><li><p>sudo pacman -S archlinuxcn-keyring加入archlinuxcn源</p><p>编辑**&#x2F;etc&#x2F;pacman.conf**,在最底部archlinux中添加国内镜像源（也可以与之前保持一致）</p></li><li><p>安装yay</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S yay </span><br></pre></td></tr></table></figure><p>这个命令更好管理软件包，且支持更多的包</p></li></ul><p><strong>到这里，就完成了部份铺垫，但是要作为日常使用的电脑，肯定是远远不够的，后续的软件按需安装，在这其中会遇到很多问题，建议参考：</strong></p><p><a href="https://wiki.archlinux.org/">https://wiki.archlinux.org/</a></p><p>（ps：打不开？很慢？小猫咪😊）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Manjaro双系统的安装与简易配置&quot;&gt;&lt;a href=&quot;#Manjaro双系统的安装与简易配置&quot; class=&quot;headerlink&quot; title=&quot;Manjaro双系统的安装与简易配置&quot;&gt;&lt;/a&gt;Manjaro双系统的安装与简易配置&lt;/h1&gt;&lt;h3 id=&quot;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C Language aspirations--（该文章渲染出现问题，见谅）</title>
    <link href="http://example.com/2022/06/18/C-Language-aspirations/"/>
    <id>http://example.com/2022/06/18/C-Language-aspirations/</id>
    <published>2022-06-18T13:25:52.000Z</published>
    <updated>2023-07-01T07:24:28.813Z</updated>
    
    <content type="html"><![CDATA[<p>1. </p><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>,<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a : %d\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>**这个程序会得到编译错误（语法），逗号表达式没有错，但是在初始化和声明变量时，逗号不是逗号表达式的意义，如果要达到目的应该为（1，2）**</code></pre><ol start="2"><li><pre><code class="c"> #include &lt;stdio.h&gt; int main() &#123;     int i=43;     printf(&quot;%d\n&quot;,printf(&quot;%d&quot;,printf(&quot;%d&quot;,i)));     return 0; &#125; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    **程序会输出4321，这是因为printf函数的返回值为输出字符的个数**</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">3. ``` c</span><br><span class="line">    #include &lt;stdio.h&gt;</span><br><span class="line">    #include &lt;unistd.h&gt;</span><br><span class="line">    int main()  </span><br><span class="line">    &#123;</span><br><span class="line">        while(1)</span><br><span class="line">        &#123;</span><br><span class="line">            fprintf(stdout,&quot;hello-std-out&quot;);</span><br><span class="line">            fprintf(stderr,&quot;hello-std-err&quot;);</span><br><span class="line">            sleep(1);</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure> **stdout和stderr是不是同设备描述符。stdout是块设备，stderr则不是。对于块设备，只有当下面几种情况下才会被输入，1）遇到回车，2）缓冲区满，3）flush被调用。而stderr则不会** </code></pre></li><li><p>file1.c</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">80</span>];</span><br></pre></td></tr></table></figure><p> file2.c</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> *arr;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>  </span><br><span class="line">&#123;      </span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arr[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <em><em>该程序可以编译通过，但运行时会出错，在另一个文件声明extern int</em> arr一个数组时并不能得到实际的期望值，因为他们的类型不匹配，所以导致指针实际并没有指向那个数组，注意：一个指向数组的指针并不等于一个数组，应修改为extern int arr[]</em>*</p></li><li><p>&#96;&#96;&#96; c<br> #include &lt;stdio.h&gt;<br> int main()<br> {<br> int a&#x3D;1;<br> switch(a)<br> {<br>     int b&#x3D;20;<br>     case 1:<br>         printf(“b is %d\n”,b);<br>         break;<br>     default:<br>         printf(“b is %d\n”,b);<br>         break;<br> }<br> return 0;<br> }</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    **我们可能以为进入switch后会对变量b进行初始化，起始不然，case语句会跳过这条语句，所以，程序会输出一个随机内存值**</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">6. ``` c</span><br><span class="line">    #include &lt;stdio.h&gt;</span><br><span class="line">    int main()  </span><br><span class="line">    &#123;</span><br><span class="line">        int i;</span><br><span class="line">        i = 10;</span><br><span class="line">        printf(&quot;i : %d\n&quot;,i);</span><br><span class="line">        printf(&quot;sizeof(i++) is: %d\n&quot;,sizeof(i++));</span><br><span class="line">        printf(&quot;i : %d\n&quot;,i);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> <strong>你可能会认为会输出10，4，11，其实不然，错在第三个，第一个是10，没有任何问题，第二个是4，是因为32位机器上int为4个字节，而第三个呢？sizeof不是一个函数，是一个操作符，i++类型的size是一件在程序运行前（编译）完成的事情，所以，sizeof（i++）完全被4取代了，在运行时也就不会有i++这个表达式了</strong></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Welcome</title>
    <link href="http://example.com/2022/06/17/Welcome/"/>
    <id>http://example.com/2022/06/17/Welcome/</id>
    <published>2022-06-17T13:32:44.000Z</published>
    <updated>2023-07-01T07:24:28.817Z</updated>
    
    <content type="html"><![CDATA[<p><strong>欢迎来到我的个人博客，此博客由于仅静态托管于github，可能无法进行正常稳定地直接访问，并且由于自己的能力有限，还未能够构造出足够优美的UI界面以及高质量的博客，望包涵！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;欢迎来到我的个人博客，此博客由于仅静态托管于github，可能无法进行正常稳定地直接访问，并且由于自己的能力有限，还未能够构造出足够优美的UI界面以及高质量的博客，望包涵！&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Makefile/GDB（未完待续）</title>
    <link href="http://example.com/2022/06/16/Makefile-GDB/"/>
    <id>http://example.com/2022/06/16/Makefile-GDB/</id>
    <published>2022-06-16T11:43:44.000Z</published>
    <updated>2023-07-01T07:24:28.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Makefile与GDB"><a href="#Makefile与GDB" class="headerlink" title="Makefile与GDB"></a>Makefile与GDB</h1><h2 id="1-Makefile"><a href="#1-Makefile" class="headerlink" title="1.Makefile"></a>1.Makefile</h2><h3 id="0-Make"><a href="#0-Make" class="headerlink" title="0.Make"></a>0.Make</h3><ul><li>一个解释makefile中指令的命令工具</li></ul><p>makefile带来的好处是——<strong>自动化编译</strong>，编写好后只需make命令，整个工程完全自动编译</p><h3 id="1-规则"><a href="#1-规则" class="headerlink" title="1.规则"></a>1.规则</h3><p>每条规则的语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target1,target2...:depend1,depend2,...</span><br><span class="line">command</span><br><span class="line">......</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="1-1目标"><a href="#1-1目标" class="headerlink" title="1.1目标"></a>1.1目标</h4><ul><li>目标与命令是相对应的</li><li>通过执行规则的命令，可以执行动作但不生成任何文件，这样的目标被称为伪目标</li></ul><h4 id="1-2依赖"><a href="#1-2依赖" class="headerlink" title="1.2依赖"></a>1.2依赖</h4><ul><li>若不需要依赖，可以不声明</li><li>可以形成嵌套，也可以是多个依赖</li></ul><h4 id="1-3命令"><a href="#1-3命令" class="headerlink" title="1.3命令"></a>1.3命令</h4><ul><li>一般情况下为shell指令</li><li>每一个命令必须有一个tab缩进，且独占一行</li></ul><h3 id="2-工作原理"><a href="#2-工作原理" class="headerlink" title="2.工作原理"></a>2.工作原理</h3><h4 id="2-1规则的执行"><a href="#2-1规则的执行" class="headerlink" title="2.1规则的执行"></a>2.1规则的执行</h4><p><strong>在调用make命令编译程序的时候，make会首先找到Makefile文件中的第一个规则，分析并执行相关的动作</strong></p><p>make命令执行的时候会根据文件的时间戳判断是否执行makefile文件中相关的命令</p><ul><li>正常情况下：<strong>目标时间戳&gt;依赖时间戳</strong>，如果执行make命令的时候检测到规则中的目标和依赖满足这个条件，那么规则的命令不会被执行</li><li>如果<strong>目标时间戳&lt;依赖时间戳</strong>，在这种情况下会重新生成命令</li><li>如果规则中的目标对应的文件根本不存在，规则中的命令肯定会执行</li></ul><h4 id="2-2文件的时间戳"><a href="#2-2文件的时间戳" class="headerlink" title="2.2文件的时间戳"></a>2.2文件的时间戳</h4><h4 id="2-3自动推导"><a href="#2-3自动推导" class="headerlink" title="2.3自动推导"></a>2.3自动推导</h4><p><strong>make中会进行一定的自动推导进行完善编译的逻辑性，不会完全依赖makefile</strong></p><h3 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h3><h4 id="3-1自定义变量"><a href="#3-1自定义变量" class="headerlink" title="3.1自定义变量"></a>3.1自定义变量</h4><p>用户自己定义的变量，<strong>makefile中变量没有类型</strong>，直接创建然后使用即可</p><h4 id="3-2预定义变量"><a href="#3-2预定义变量" class="headerlink" title="3.2预定义变量"></a>3.2预定义变量</h4><table><thead><tr><th>变量名</th><th>含义</th><th>默认值</th></tr></thead><tbody><tr><td>AR</td><td>生成静态库文件的程序名称</td><td>ar</td></tr><tr><td>AS</td><td>汇编编译器的名称</td><td>as</td></tr><tr><td>CC</td><td>C语言编译器的名称</td><td>cc</td></tr><tr><td>CPP</td><td>C语言预编译器的名称</td><td>$(CC) -E</td></tr><tr><td>CXX</td><td>C++语言编译器的名称</td><td>g++</td></tr><tr><td>FC</td><td>FORTRAN语言编译器的名称</td><td>f77</td></tr><tr><td>RM</td><td>删除文件程序的名称</td><td>rm -f</td></tr><tr><td>CFLAGS</td><td>C语言编译器的编译选项</td><td>无默认值</td></tr><tr><td>CPPFLAGS</td><td>C++语言预编译器的编译选项</td><td>无默认值</td></tr><tr><td>CXXFLAGS</td><td>c++语言编译器的编译选项</td><td>无默认值</td></tr></tbody></table><h4 id="3-3自动变量"><a href="#3-3自动变量" class="headerlink" title="3.3自动变量"></a>3.3自动变量</h4><p>自动变量用来表示这些规则中的目标文件和依赖文件，并且<strong>只能在规则的命令中使用</strong></p><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td>$*</td><td>表示目标文件的名称，不包含文件的拓展名</td></tr><tr><td>$+</td><td>表示所有的依赖文件，这些依赖文件以空格分开，按照出现的先后顺序，其中可能包含重复的依赖文件</td></tr><tr><td>$&lt;</td><td>表示依赖项中第一个依赖文件的名称</td></tr><tr><td>$?</td><td>依赖项中，所有比目标文件时间戳晚的依赖文件，依赖文件之间以空格分开</td></tr><tr><td><strong>$@</strong></td><td><strong>表示目标文件的名称，包含文件的拓展名</strong></td></tr><tr><td><strong>%^</strong></td><td><strong>依赖项中，所有不重复的依赖文件，文件之间以空格分开</strong></td></tr></tbody></table><h3 id="4-模式匹配"><a href="#4-模式匹配" class="headerlink" title="4.模式匹配"></a>4.模式匹配</h3><p>通过一个规则模板(<strong>一定要使用自动变量</strong>)：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">%.o:%.c</span></span><br><span class="line">gcc <span class="variable">$&lt;</span> -c</span><br></pre></td></tr></table></figure><h3 id="5-函数"><a href="#5-函数" class="headerlink" title="5.函数"></a>5.函数</h3><h4 id="5-1wildcard"><a href="#5-1wildcard" class="headerlink" title="5.1wildcard"></a>5.1wildcard</h4><p><em><strong>获取指定目录下指定类型的文件，其返回值以空格分开</strong></em></p><p><strong>函数原型：</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">wildcard</span> PATTERN...)</span></span><br><span class="line"><span class="comment">#参数：指定某个目录，搜索这个路径下指定类型的文件</span></span><br></pre></td></tr></table></figure><ul><li>参数功能：<ul><li>PATTERN指的是某个或多个目录下的对应的某种类型的文件</li><li>可以指定多个目录，路径之间用空格分开</li></ul></li><li>返回值：<ul><li>得到的若干个文件的文件列表，文件民之间用空格分开</li></ul></li></ul><h4 id="5-2patsubst"><a href="#5-2patsubst" class="headerlink" title="5.2patsubst"></a>5.2patsubst</h4><p><em><strong>按照指定的模式替换指定文件民的后缀</strong></em></p><p><strong>函数原型：</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">patsubst</span> &lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;)</span></span><br><span class="line"><span class="comment">#指定的文件名替换后的文件名文件来源</span></span><br></pre></td></tr></table></figure><ul><li>参数功能：<ul><li>pattern：模式字符串，指定被替换文件名的后缀<ul><li>文件名与路径不关心，使用%表示即可</li><li>在通配符后要指定要被替换掉后缀</li></ul></li><li>replacement：模式字符串，指定参数pattern被替换后的后缀名<ul><li>依旧使用%表示文件名</li><li>在通配符后指定新的后缀名</li></ul></li><li>text：存储被替换的原始数据</li></ul></li><li>返回值：<ul><li>函数返回被替换过后的字符串</li></ul></li></ul><p><strong>示例：</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">src1=a.cpp b.cpp c.cpp</span><br><span class="line">src2=<span class="variable">$(<span class="built_in">patsubst</span> %.cpp,%.c,<span class="variable">$(src1)</span>)</span></span><br><span class="line"><span class="comment"># src2的值为：a.c b.c c.c</span></span><br></pre></td></tr></table></figure><h3 id="6-makefile的编写"><a href="#6-makefile的编写" class="headerlink" title="6.makefile的编写"></a>6.makefile的编写</h3><h4 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h4><p><strong>让makefile工具不去比较目标文件与依赖文件的时间戳</strong></p><p>在makefile中声明一个伪目标要使用<code>&lt;.PHONY&gt;</code>关键字</p><p>声明方式：**.PHONY:伪目标名称**</p><h4 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h4><p>shell命令前的<code>-</code>可以让程序即使执行失败该条命令也不会终止，继续执行下一条命令</p><h2 id="2-GDB"><a href="#2-GDB" class="headerlink" title="2.GDB"></a>2.GDB</h2><p>gdb也是GNU软件系统社区提供的调试器</p><p><strong>gdb是一套字符界面的程序集，可以使用命令 gdb 加载要调试的程序</strong></p><h3 id="1-调试准备"><a href="#1-调试准备" class="headerlink" title="1.调试准备"></a>1.调试准备</h3><p>项目如果是为了进行调试而编译时，必须要打开调试选项<code>gcc -g</code>，可选的选项为<code>-o0</code> <code>-Wall</code></p><h3 id="2-启动和退出gdb"><a href="#2-启动和退出gdb" class="headerlink" title="2.启动和退出gdb"></a>2.启动和退出gdb</h3><h4 id="2-1启动gdb"><a href="#2-1启动gdb" class="headerlink" title="2.1启动gdb"></a>2.1启动gdb</h4><p><strong>在启动gdb进程后，被调试的程序没有被执行</strong></p><p>直接在可执行程序的目录下执行gdb即可启动</p><h4 id="2-2命令行传参"><a href="#2-2命令行传参" class="headerlink" title="2.2命令行传参"></a>2.2命令行传参</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(gdb)set args#参数1参数2 .。。。设置参数</span><br><span class="line"></span><br><span class="line">(gdb)   show args   #查看设置的命令行参数</span><br></pre></td></tr></table></figure><h4 id="2-3gdb中启动程序"><a href="#2-3gdb中启动程序" class="headerlink" title="2.3gdb中启动程序"></a>2.3gdb中启动程序</h4><p><strong>在gdb中，run命令和start命令只能执行一次</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb)run/r #如果程序设置了断点，会在第一个断点处停下，否则执行全部</span><br><span class="line">(gdb)start #只执行mian函数的第一行命令，等待输入后续其他gdb命令，如果还想让程序在start之后继续运行，或者在断点后继续运行，可以使用 continue/c 命令</span><br></pre></td></tr></table></figure><h4 id="2-4退出gdb"><a href="#2-4退出gdb" class="headerlink" title="2.4退出gdb"></a>2.4退出gdb</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gdb) quit/q</span><br></pre></td></tr></table></figure><h3 id="3-查看代码"><a href="#3-查看代码" class="headerlink" title="3.查看代码"></a>3.查看代码</h3><h4 id="3-1当前文件"><a href="#3-1当前文件" class="headerlink" title="3.1当前文件"></a>3.1当前文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb)list  #从第一行开始显示查看代码信息位于程序入口函数main所在的文件中，如果不进行文件切换main函数所在的文件就是当前文件</span><br><span class="line">(gdb)list 行号 #显示行号对应的上下文内容，默认只显示10行</span><br><span class="line">(gdb)list 函数名#显示函数的上下文内容，默认只显示10行</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果还想继续查看代码，可以继续执行list命令也可以直接回车(会执行上一次执行的gdb命令)</span></span><br></pre></td></tr></table></figure><h4 id="3-2切换文件"><a href="#3-2切换文件" class="headerlink" title="3.2切换文件"></a>3.2切换文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) l 文件名:行号#切换到指定文件中的对应行号的上下文内容，默认只显示10行</span><br><span class="line">(gdb) l 文件名:函数名 #切换到指定文件名中的指定函数上下文内容，默认只显示10行</span><br></pre></td></tr></table></figure><h4 id="3-3设置显示的行数"><a href="#3-3设置显示的行数" class="headerlink" title="3.3设置显示的行数"></a>3.3设置显示的行数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以下的listsize可以更换为list</span></span><br><span class="line">(gdb) set listsize 行数#设置一次显示的行数</span><br><span class="line">(gdb) show listsize       #显示行数</span><br></pre></td></tr></table></figure><h3 id="4-断点操作"><a href="#4-断点操作" class="headerlink" title="4.断点操作"></a>4.断点操作</h3><h4 id="4-1设置断点"><a href="#4-1设置断点" class="headerlink" title="4.1设置断点"></a>4.1设置断点</h4><ul><li><p>设置普通断点到当前文件</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">break</span>==b</span></span><br><span class="line">(gdb) b 行号</span><br><span class="line">(gdb) b 函数名#停止在函数的第一行</span><br></pre></td></tr></table></figure></li><li><p>设置普通断点到某个非当前文件上</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b 文件名:行号</span><br><span class="line">(gdb) b 文件名:函数名</span><br></pre></td></tr></table></figure></li><li><p>设置条件断点</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">必须要满足某个条件，程序才会停止在这个断点的位置上</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通常情况下在循环内使用</span></span><br><span class="line">(gdb) b 行数 if 变量==某个值</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-2查看断点"><a href="#4-2查看断点" class="headerlink" title="4.2查看断点"></a>4.2查看断点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">info == i</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看设置的断点信息</span></span><br><span class="line">(gdb) i b #info break</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">举例</span></span><br><span class="line">(gdb) i b</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">1       breakpoint     keep y   0x0000000000400cb5 in main() at test.cpp:12</span><br><span class="line">2       breakpoint     keep y   0x0000000000400cbd in main() at test.cpp:13</span><br><span class="line">3       breakpoint     keep y   0x0000000000400cec in main() at test.cpp:18</span><br><span class="line">4       breakpoint     keep y   0x00000000004009a5 in insertionSort(int*, int) </span><br><span class="line">                                                   at insert.cpp:8</span><br><span class="line">5       breakpoint     keep y   0x0000000000400cdd in main() at test.cpp:16</span><br><span class="line">6       breakpoint     keep y   0x00000000004009e5 in insertionSort(int*, int) </span><br><span class="line">                                                   at insert.cpp:16</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Num: 断点的编号，删除断点或者设置断点状态的时候都需要使用</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Enb: 当前断点的状态，y 表示断点可用，n 表示断点不可用</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">What: 描述断点被设置在了哪个文件的哪一行或者哪个函数上</span></span><br></pre></td></tr></table></figure><h4 id="4-3删除断点"><a href="#4-3删除断点" class="headerlink" title="4.3删除断点"></a>4.3删除断点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">delete == del == d</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要 info b 查看断点的信息, 第一列就是编号</span></span><br><span class="line">(gdb) d 断点的编号1 [断点编号2 ...]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">举例:</span> </span><br><span class="line">(gdb) d 1          # 删除第1个断点</span><br><span class="line">(gdb) d 2 4 6      # 删除第2,4,6个断点</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除一个范围, 断点编号 num1 - numN 是一个连续区间</span></span><br><span class="line">(gdb) d num1-numN</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">举例, 删除第1到第5个断点</span></span><br><span class="line">(gdb) d 1-5</span><br></pre></td></tr></table></figure><h4 id="4-4设置断点状态"><a href="#4-4设置断点状态" class="headerlink" title="4.4设置断点状态"></a>4.4设置断点状态</h4><ul><li><p>设置断点无效</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">让断点失效之后, gdb调试过程中程序是不会停在这个位置的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">disable</span> == dis</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置某一个或者某几个断点无效</span></span><br><span class="line">(gdb) dis 断点1的编号 [断点2的编号 ...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置某个区间断点无效</span></span><br><span class="line">(gdb) dis 断点1编号-断点n编号</span><br></pre></td></tr></table></figure></li><li><p>让无效的断点生效</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">enable</span> == ena</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置某一个或者某几个断点有效</span></span><br><span class="line">(gdb) ena 断点1的编号 [断点2的编号 ...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置某个区间断点有效</span></span><br><span class="line">(gdb) ena 断点1编号-断点n编号</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-调试命令"><a href="#5-调试命令" class="headerlink" title="5.调试命令"></a>5.调试命令</h3><h4 id="5-1继续运行gdb"><a href="#5-1继续运行gdb" class="headerlink" title="5.1继续运行gdb"></a>5.1继续运行gdb</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">continue</span> == c</span></span><br><span class="line">(gdb) continue</span><br></pre></td></tr></table></figure><h4 id="5-2手动打印信息"><a href="#5-2手动打印信息" class="headerlink" title="5.2手动打印信息"></a>5.2手动打印信息</h4><p><strong>当程序被某个断点阻塞之后，可以通过一些命令打印变量的名字或变量的类型，并且还可以跟踪打印某个变量的值</strong></p><h5 id="5-2-1打印信息值"><a href="#5-2-1打印信息值" class="headerlink" title="5.2.1打印信息值"></a>5.2.1打印信息值</h5><table><thead><tr><th>格式化字符(&#x2F;fmt)</th><th>说明</th></tr></thead><tbody><tr><td><strong>&#x2F;x</strong></td><td>以十六进制的形式打印出整数</td></tr><tr><td><strong>&#x2F;d</strong></td><td>以有符号、十进制的形式打印出整数</td></tr><tr><td><strong>&#x2F;u</strong></td><td>以无符号、十进制的形式打印出整数</td></tr><tr><td><strong>&#x2F;o</strong></td><td>以八进制的形式打印出整数</td></tr><tr><td><strong>&#x2F;t</strong></td><td>以二进制的形式打印出整数</td></tr><tr><td><strong>&#x2F;f</strong></td><td>以浮点数的形式打印变量或表达式的值</td></tr><tr><td><strong>&#x2F;c</strong></td><td>以字符形式打印变量或表达式的值</td></tr></tbody></table><ul><li><p>print命令语法格式：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">print</span> == p</span></span><br><span class="line">(gdb) p 变量名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果变量是一个整形, 默认对应的值是以10进制格式输出, 其他格式请参考上表</span></span><br><span class="line">(gdb) p/fmt 变量名</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-2-2打印变量类型"><a href="#5-2-2打印变量类型" class="headerlink" title="5.2.2打印变量类型"></a>5.2.2打印变量类型</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法格式</span></span><br><span class="line">(gdb) ptype 变量名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印变量类型</span></span><br><span class="line">(gdb) ptype i</span><br><span class="line">type = int</span><br><span class="line">(gdb) ptype array[i]</span><br><span class="line">type = int</span><br><span class="line">(gdb) ptype array</span><br><span class="line">type = int [12]</span><br></pre></td></tr></table></figure><h4 id="5-3自动打印信息"><a href="#5-3自动打印信息" class="headerlink" title="5.3自动打印信息"></a>5.3自动打印信息</h4><h5 id="5-3-1设置变量名自动显示"><a href="#5-3-1设置变量名自动显示" class="headerlink" title="5.3.1设置变量名自动显示"></a>5.3.1设置变量名自动显示</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在变量的有效取值范围内, 自动打印变量的值(设置一次, 以后就会自动显示)</span></span><br><span class="line">(gdb) display 变量名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以指定的整形格式打印变量的值, 关于 <span class="built_in">fmt</span> 的取值, 请参考 <span class="built_in">print</span> 命令</span></span><br><span class="line">(gdb) display/fmt 变量名</span><br></pre></td></tr></table></figure><h5 id="5-3-2查看自动显示列表"><a href="#5-3-2查看自动显示列表" class="headerlink" title="5.3.2查看自动显示列表"></a>5.3.2查看自动显示列表</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">info == i</span></span><br><span class="line">(gdb) info display</span><br><span class="line">Auto-display expressions now in effect:</span><br><span class="line">Num Enb Expression</span><br><span class="line">1:   y  i</span><br><span class="line">2:   y  array[i]</span><br><span class="line">3:   y  /x array[i]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Num : 变量或表达式的编号，GDB 调试器为每个变量或表达式都分配有唯一的编号</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Enb : 表示当前变量（表达式）是处于激活状态还是禁用状态，如果处于激活状态（用 y 表示），则每次程序停止执行，该变量的值都会被打印出来；反之，如果处于禁用状态（用 n 表示），则该变量（表达式）的值不会被打印。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Expression ：被自动打印值的变量或表达式的名字</span></span><br></pre></td></tr></table></figure><h5 id="5-3-3取消自动显示"><a href="#5-3-3取消自动显示" class="headerlink" title="5.3.3取消自动显示"></a>5.3.3取消自动显示</h5><ul><li><p>删除自动显示列表中的变量或表达式</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令中的 num 是通过 info display 得到的编号, 编号可以是一个或者多个</span></span><br><span class="line">(gdb) undisplay num [num1 ...]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">num1 - numN 表示一个范围</span></span><br><span class="line">(gdb) undisplay num1-numN</span><br><span class="line"></span><br><span class="line">(gdb) delete display num [num1 ...]</span><br><span class="line">(gdb) delete display num1-numN</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">举例</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看显示列表</span></span><br><span class="line">(gdb) info display</span><br><span class="line">Auto-display expressions now in effect:</span><br><span class="line">Num Enb Expression</span><br><span class="line">1:   y  i</span><br><span class="line">2:   y  array[i]</span><br><span class="line">3:   y  /x array[i]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除变量显示, 需要使用 info display 得到的变量/表达式编号</span></span><br><span class="line">(gdb) undisplay 1 2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看显示列表, 只剩下一个了</span></span><br><span class="line">(gdb) i display</span><br><span class="line">Auto-display expressions now in effect:</span><br><span class="line">Num Enb Expression</span><br><span class="line">3:   y  /x array[i]</span><br></pre></td></tr></table></figure></li><li><p>禁用自动显示列表中处于激活状态的变量或表达式</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令中的 num 是通过 info display 得到的编号, 编号可以是一个或者多个</span></span><br><span class="line">(gdb) disable display num [num1 ...]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">num1 - numN 表示一个范围</span></span><br><span class="line">(gdb) disable display num1-numN</span><br></pre></td></tr></table></figure></li><li><p>启用自动显示列表中被禁用的变量或表达式</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令中的 num 是通过 info display 得到的编号, 编号可以是一个或者多个</span></span><br><span class="line">(gdb) enable  display num [num1 ...]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">num1 - numN 表示一个范围</span></span><br><span class="line">(gdb) disable display num1-numN</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-4单步调试"><a href="#5-4单步调试" class="headerlink" title="5.4单步调试"></a>5.4单步调试</h4><p><strong>当程序阻塞到某个断点上之后，可以通过以下命令对程序进行单步调试</strong></p><h5 id="5-4-1step"><a href="#5-4-1step" class="headerlink" title="5.4.1step"></a>5.4.1step</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从当前代码行位置, 一次调试当前行下的每一行代码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">step == s</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果这一行是函数调用, 执行这个命令, 就可以进入到函数体的内部</span></span><br><span class="line">(gdb) step</span><br></pre></td></tr></table></figure><h5 id="5-4-2-finish"><a href="#5-4-2-finish" class="headerlink" title="5.4.2 finish"></a>5.4.2 finish</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果通过 s 单步调试进入到函数内部, 想要跳出这个函数体</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果函数体内存在有效断点，则无法跳出</span></span><br><span class="line">(gdb) finish</span><br></pre></td></tr></table></figure><h5 id="5-4-3next"><a href="#5-4-3next" class="headerlink" title="5.4.3next"></a>5.4.3next</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">next == n</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果这一行是函数调用, 执行这个命令, 不会进入到函数体的内部</span></span><br><span class="line">(gdb) next</span><br></pre></td></tr></table></figure><h5 id="5-4-4until"><a href="#5-4-4until" class="headerlink" title="5.4.4until"></a>5.4.4until</h5><p><strong>使用<code>until</code>命令可以直接跳出循环体，但有两个满足的条件：</strong></p><ol><li><strong>要跳出的循环体内部不能有有效的断点</strong></li><li><strong>必须要在循环体的开始&#x2F;结束行执行该命令</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gdb) until</span><br></pre></td></tr></table></figure><h4 id="5-5设置变量值"><a href="#5-5设置变量值" class="headerlink" title="5.5设置变量值"></a>5.5设置变量值</h4><p><strong>使用以下方式可以直接对虚幻条件的哦按段</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以在循环中使用, 直接设置循环因子的值</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">假设某个变量的值在程序中==90的概率是5%, 这时候可以直接通过命令将这个变量值设置为90</span></span><br><span class="line">(gdb) set var 变量名=值</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Makefile与GDB&quot;&gt;&lt;a href=&quot;#Makefile与GDB&quot; class=&quot;headerlink&quot; title=&quot;Makefile与GDB&quot;&gt;&lt;/a&gt;Makefile与GDB&lt;/h1&gt;&lt;h2 id=&quot;1-Makefile&quot;&gt;&lt;a href=&quot;#1-M</summary>
      
    
    
    
    
  </entry>
  
</feed>
